{"version":3,"sources":["<no source>","../../../header.css","../../../../../packages/header/main.scss","../../../../../packages/core/src/styles/icons/_tools.scss","../../../../../packages/links/src/styles/tools/_build.scss","../../../../../packages/links/src/styles/tools/_icons.scss","../../../../../packages/core/src/styles/spacing/tools/_space.scss","../../../../../packages/core/src/styles/global/tools/_pseudo.scss","../../../../../packages/core/src/styles/global/functions/_units.scss","../../../../../packages/header/src/styles/_module.scss","../../../../../packages/core/src/styles/reset/tools/_link.scss","../../../../../packages/core/src/styles/reset/tools/_lists.scss","../../../../../packages/core/src/styles/spacing/tools/_size.scss","../../../../../packages/core/src/styles/global/misc/shadow/_tools.scss","../../../../../packages/core/src/styles/global/misc/shadow/_settings.scss","../../../../../packages/core/src/styles/global/tools/_blocks.scss","../../../../../packages/core/src/styles/spacing/tools/_position.scss","../../../../../packages/core/src/styles/global/tools/_display.scss","../../../../../packages/header/src/styles/modules/_brand.scss","../../../../../packages/logo/src/styles/_tools.scss","../../../../../packages/schemes/src/styles/tools/_element.scss","../../../../../packages/core/src/styles/global/functions/_strings.scss","../../../../../packages/core/src/styles/typography/tools/_styles.scss","../../../../../packages/header/src/styles/modules/_modal.scss","../../../../../packages/header/src/styles/modules/_navbar.scss","../../../../../packages/links/src/styles/tools/_nest.scss","../../../../../packages/links/src/styles/tools/_sizes.scss","../../../../../packages/header/src/styles/modules/_shortcuts.scss","../../../../../packages/schemes/src/styles/tools/_hover.scss","../../../../../packages/header/src/styles/_schemes.scss","../../../../../packages/core/src/styles/global/misc/breakpoints/_tools.scss","../../../../../packages/header/src/styles/modules/_tools.scss","../../../../../packages/header/src/styles/modules/_search.scss","../../../../../packages/header/src/styles/modules/_nav.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACAhB;;yCDGyC;;AE+DnC;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,8BAA8B;EAC9B,oBAAoB;EACpB,oBAAoB;EACpB,cAAc;AF7DtB;;AGuCQ;ECxBJ,mBAAmB;EAuBnB,iBCboB;EDcpB,kBCdoB;EDepB,oBAJ0C;EAK1C,qBAL0C;AJ5B9C;;AMTU;EJ0EN,iBKzD8C;APJlD;;AMbU;EF6CJ,cAAc;EACd,oBATwC;AJnB9C;;AQvBA;ECcE,gBAAU;ECDV,gBAAU;ECVN,WAAO;ECFX,iFCC0E;Ab4B5E;;AcvBE;ECNA,kBAAU;ECKR,aAAa;EAIb,mBAAgB;EAIhB,mBAAa;EAIb,2BAAiB;EAIjB,eAAW;EXmDX,kBA1CoB;ALSxB;;AiBxCA;EDMI,aAAa;EAIb,mBAAgB;EAIhB,mBAAa;EAIb,2BAAiB;EAIjB,eAAW;ELnBT,WAAO;AXgEb;;AM9DU;EAGJ,cAAS;EAIT,WWHoB;EACtB,QAAQ;ENPN,WAAO;AXoFb;;AiB1DA;EACE,QAAQ;EZ2CN,gBA1CoB;AL+ExB;;AkBlFE;EA1BA,oBAAW;EbuET,YYxCoB;AjBkFxB;;AM9GU;EKFJ,gBAAO;EAGP,eAAQ;ENyDR,sBazDwC;EAC1C,2DAAkG;EAClG,4CAA0D;AlBmH9D;;AkBjHY;EACN,2DAAkG;AlBoHxG;;AM1HU;EYWN,qBAAW;EACX,oCAA0D;EAC1D,8CAAyD;EACzD,uBAAa;AlBmHjB;;AkBjHY;EACN,qCAAgD;AlBoHtD;;AiBrGA;EZoCI,gBA1CoB;EYQtB,QAAQ;AjBwGV;;AiB1GC;EAKG,cAAc;AjByGlB;;AiBrGA;EZaM,oBA5BkB;EA6BlB,uBA7BkB;EAwBlB,oBAxBkB;EAyBlB,qBAzBkB;EYmBtB,QAAQ;EN/CJ,WAAO;EQiDX,iCC8BsG;ApB2ExG;;AiBlGE;EI7BE,gBAAiF;EAXnF,mBAA6C;EAG3C,mBAA6D;ArB2JjE;;AiBlHE;EZAI,gBYEsB;AjB2H5B;;AQ5LA;EcCE,uBAAuB;EACvB,cAAc;EjBuEZ,sBiBtEuB;EHiDzB,+BC8BsG;EE7EtG,cAAc;AtB+LhB;;AQpMA;EcQI,aAAa;AtBgMjB;;AQxMA;EcgBI,uBAAuB;EjByDvB,oBiBxDwB;AtBkM5B;;AQnNA;EHyEI,iBA1CoB;AL8LxB;;AQ7NA;EOCE,kBAAU;EAER,SAAK;EAGL,WAAO;EOiCP,aAAa;AtBiNjB;;AuBxPA;EPMI,aAAa;EAIb,mBAAgB;EAIhB,qBAAa;EDbf,kBAAU;EAER,MAAK;EAGL,QAAO;EVmEP,gBA1CoB;ALyOxB;;AwBzME;EDrDE,cAAc;EACd,mBAAmB;AvBwQvB;;AM9QU;EJ6CN,YAAqB;AFqOzB;;AMlRU;EJ6CN,YAAqB;AFyOzB;;Ac9QE;EEPE,aAAa;EAIb,sBAAgB;AhB2SpB;;AclSE;EEbE,aAAa;EAIb,mBAAgB;EAIhB,mBAAa;EGsCf,wCC8BsG;ApByPxG;;AwB5QE;EC3DA,mBlBkBgD;EkBjBhD,mBpB0BsB;EoBvBtB,gBpBuBsB;EoBTtB,wBAAsD;EAGpD,mBAAe;ErBJf,mBAAmB;EsBOjB,gBAAgB;EAChB,eAAe;EACf,gBAAgB;ErB2ClB,kBqB1CuB;EACrB,gBAAgB;EAChB,eAAe;A1BoUrB;;AwB5TM;EACE,eAAe;EACf,gBAAgB;AxB+TxB;;AMrWU;EFQJ,eGS4C;APwVlD;;AMzWU;EFwBJ,qBqBCwB;ErBAxB,oBCCkB;ALoVxB;;AM9WU;ED0DJ,oBAhCkB;ALwVxB;;AQvXA;EH+DM,mBAhCkB;ALkXxB;;AQjZA;EWoDE,+BC8BsG;ApB0VxG;;AczZE;EKiCA,wCC8BsG;ApB8VxG;;AM3aU;Ea+CR,6BC8BsG;ApBwWxG;;AczbE;EKmDA,kBC8BsG;ApB4WxG;;AwB/XE;ELXA,gCC8BsG;ED9BtG,mBC8BsG;ApBiXxG;;AmBxaM;EQTF,uCAAc;EACd,yCAAe;A3BqbnB;;AmB7aM;;EQTF,uCAAc;EACd,yCAAe;A3B2bnB;;AmBnbM;;EQTF,uCAAc;EACd,yCAAe;A3BicnB;;AmBzbM;;EQTF,uCAAc;EACd,yCAAe;A3BucnB;;AmB7aM;EQ3BF,uCAAc;EACd,yCAAe;A3B4cnB;;A4B9cG;ETmCD,kBC8BsG;ApBiZxG;;AQneA;EWoDE,uCC8BsG;ApBqZxG;;A4BveA;EToDE,gCC8BsG;ED9BtG,mBC8BsG;ApB0ZxG;;AmBjdM;EQTF,uCAAc;EACd,yCAAe;A3B8dnB;;AmBtdM;;EQTF,uCAAc;EACd,yCAAe;A3BoenB;;AmB5dM;;EQTF,uCAAc;EACd,yCAAe;A3B0enB;;AmBleM;;EQTF,uCAAc;EACd,yCAAe;A3BgfnB;;AmBtdM;EQ3BF,uCAAc;EACd,yCAAe;A3BqfnB;;A6B3fI;EZ8CF;IIxCA,kBAA6C;IAG3C,oBAA6D;ErBiK/D;AACF;;A6B3KI;EfNF;ITkEE,eA1CoB;ELctB;;EctCA;ITkEE,iBG5DqB;ERsCvB;;Ec5CA;INSI,iBAAiB;ERyCrB;;EiBzDF;IZ2DM,iBA5BkB;IA6BlB,oBA7BkB;EL0CtB;;EiBzEF;IAMI,iBAAiB;EjByEnB;;EM1EQ;IWSJ,aAAa;EjB8EjB;;EiBzEF;IZsDI,aA1CoB;ELmEtB;;EiB/ED;;IZ4CK,oBAhCkB;ELyEtB;;EiB1DF;IZSM,cYNe;IZOf,eYPe;EjBkHnB;;EiBrHF;IASI,gBAAgB;IAChB,WAAW;EjBkHb;;EQ1KF;IcWM,cAAc;EtBkMlB;;EQ7MF;IHyEI,oBA1CoB;ELyLtB;;EQxNF;IHyEI,eA1CoB;ELmMtB;;EQlOF;IH+DM,ciBpCoB;IjB8CtB,SiB7CiB;IXzBf,WAAO;IAGP,YAAQ;IWwBV,mBAAmB;IACnB,UAAU;IACV,iBAAiB;IACjB,6BAA6B;IAC7B,iBAAiB;EtB8MnB;;EQhPF;IcyCM,aAAa;EtBoNjB;;EuB7PF;IAMI,aAAa;EvBuQf;;E8B7QF;IAEI,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;IzBmDf,kBAxBkB;IAyBlB,mBAzBkB;IAgClB,iByBzDuB;IACzB,cAAc;E9B+RhB;;E8BtSD;IzB+DK,gBAhCkB;EL0QtB;;E8BzSD;IzB+DK,iByBhDuB;E9BgS3B;;EclSA;IT4DE,2BqBrE2B;E1BsT7B;;Ec7SA;IEPE,aAAa;IAIb,mBAAgB;IAQhB,yBAAiB;IAIjB,eAAW;EhB6Sb;;EchTA;ITsDE,kBA1CoB;IA0CpB,kBA1CoB;IqBXlB,gBAAgB;E1B8TpB;;EQlVF;IWoDE,kCC8BsG;EpBmQtG;;EwBtRA;IC3DA,mBlBkBgD;IkBjBhD,mBpB0BsB;IoBvBtB,gBpBuBsB;IoBTtB,wBAAsD;IAGpD,mBAAe;IrBJf,mBAAmB;EJ4WrB;;EwBxVI;IACE,eAAe;IACf,gBAAgB;ExB0VtB;;EMhYQ;IFQJ,eGS4C;EPkXhD;;EMnYQ;IFwBJ,qBqBCwB;IrBAxB,oBCCkB;EL6WtB;;EQ5YF;IGyBM,oBAAW;INsCX,a0B1DmB;I1B0DnB,iB0BzDuB;E/BkZ3B;;EQxZF;IHyEI,0BArCqB;IAqCrB,2BArCqB;I2BhCrB,2BAA2B;EhC4Z7B;;EQhaF;IwBOM,4BAAoC;EhC4ZxC;;EQnaF;IICE,iFCC0E;Ebqa1E;;EQvaF;IWoDE,kCC8BsG;EpBmWtG;AAvYF","file":"header.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  HEADER\n\\* ------------------------------------ */\n.rf-header__navbar .rf-btn::before {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.rf-header__navbar .rf-btn {\n  flex-direction: row;\n  max-width: 2.5rem;\n  max-height: 2.5rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.rf-header__navbar .rf-btn::before {\n  font-size:  1.5rem;\n}\n\n.rf-header__navbar .rf-btn::before {\n  margin-left: 0;\n  margin-right: 0.5rem;\n}\n\n.rf-header {\n  --is-link: false;\n  --is-list: false;\n  width: 100%;\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.1), 0 8px 16px -16px rgba(0, 0, 0, 0.32);\n}\n\n.rf-header__body {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin: 0 -0.75rem;\n}\n\n@media (min-width: 62em) {\n  .rf-header__body {\n    margin: 0 -1rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header__body {\n    padding: 1.5rem 0;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header__body {\n    flex-wrap: nowrap;\n  }\n}\n\n.rf-header__brand {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  width: 100%;\n}\n\n@media (min-width: 62em) {\n  .rf-header__brand {\n    margin-top: -1rem;\n    margin-bottom: -1rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header__brand {\n    flex-wrap: nowrap;\n  }\n}\n\n.rf-header__brand::after {\n  display: block;\n  content: \"\";\n  order: 3;\n  width: 100%;\n}\n\n@media (min-width: 62em) {\n  .rf-header__brand::after {\n    content: none;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header__logo, .rf-header__operator, .rf-header__service {\n    padding: 1rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header__logo:not(:last-child), .rf-header__operator:not(:last-child), .rf-header__service:not(:last-child) {\n    margin-right: 0.5rem;\n  }\n}\n\n.rf-header__logo {\n  order: 1;\n  padding: 0.75rem;\n}\n\n.rf-header__logo .rf-logo {\n  font-size: 0.7875rem;\n  margin: -1em;\n}\n\n.rf-header__logo .rf-logo::before {\n  width: 2.0625rem;\n  height: 0.75rem;\n  margin-bottom: 0.25rem;\n  background-size: 2.0625rem 0.84375rem, 2.0625rem 0.75rem, 0;\n  background-position: 0 -0.04688rem, 0 0, 0 0;\n}\n\n:root[data-rf-mourning] .rf-header__logo .rf-logo::before {\n  background-size: 2.0625rem 0.84375rem, 0, 2.0625rem 0.75rem;\n}\n\n.rf-header__logo .rf-logo::after {\n  min-width: 1.96875rem;\n  background-size: 3.9375rem 2.8125rem;\n  background-position: 0 calc(100% + 1.40625rem);\n  padding-top: 1.65625rem;\n}\n\n:root[data-rf-theme=\"dark\" i] .rf-header__logo .rf-logo::after {\n  background-position: -1.96875rem 100%;\n}\n\n.rf-header__operator {\n  padding: 0.75rem;\n  order: 2;\n}\n\n.rf-header__operator img {\n  display: block;\n}\n\n.rf-header__service {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  margin-left: 0.75rem;\n  margin-right: 0.75rem;\n  order: 4;\n  width: 100%;\n  border-top: 1px solid var(--g300);\n}\n\n@media (min-width: 62em) {\n  .rf-header__service {\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header__service {\n    border-top: none;\n    width: auto;\n  }\n}\n\n.rf-header__service-title {\n  font-weight:  700 ;\n  font-size:  1.125rem ;\n  line-height:  1.5rem ;\n}\n\n@media (min-width: 48em) {\n  .rf-header__service-title {\n    font-size:  1.25rem ;\n    line-height:  1.75rem ;\n  }\n}\n\n.rf-header__service-title, .rf-header__service-tagline {\n  margin-bottom: 0;\n}\n\n.rf-header .rf-modal {\n  pointer-events: initial;\n  display: block;\n  padding: 4.5rem 1rem 0;\n  background-color: var(--w-g750);\n  overflow: auto;\n}\n\n.rf-header .rf-modal:not(.rf-modal--opened) {\n  display: flex;\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-modal:not(.rf-modal--opened) {\n    display: block;\n  }\n}\n\n.rf-header .rf-modal .rf-container {\n  pointer-events: initial;\n  padding: 1rem 1rem 0;\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-modal .rf-container {\n    padding: 0 2rem 1rem;\n  }\n}\n\n.rf-header .rf-modal .rf-container .rf-grid-row {\n  margin: 0 -0.5rem;\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-modal .rf-container .rf-grid-row {\n    margin: 0 -1rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-modal {\n    padding-top: 0;\n    margin: 0;\n    width: auto;\n    height: auto;\n    visibility: visible;\n    opacity: 1;\n    position: initial;\n    background-color: transparent;\n    overflow: inherit;\n  }\n}\n\n.rf-header .rf-modal > .rf-link--close {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  display: flex;\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-modal > .rf-link--close {\n    display: none;\n  }\n}\n\n.rf-header__navbar {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 0.25rem;\n}\n\n@media (min-width: 62em) {\n  .rf-header__navbar {\n    display: none;\n  }\n}\n\n.rf-header__navbar .rf-btn {\n  flex: 0 0 auto;\n  white-space: nowrap;\n}\n\n.rf-header__navbar .rf-btn--menu::before {\n  content:  \"\";\n}\n\n.rf-header__navbar .rf-btn--search::before {\n  content:  \"\";\n}\n\n@media (min-width: 62em) {\n  .rf-header__tools {\n    flex-direction: column;\n    align-items: flex-end;\n    text-align: right;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    margin-left: auto;\n    flex: 1 0 auto;\n  }\n  .rf-header__tools .rf-shortcuts + .rf-search-bar {\n    margin-top: 1rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header__tools.rf-modal {\n    margin-left: auto;\n  }\n}\n\n.rf-header .rf-shortcuts__list {\n  display: flex;\n  flex-direction: column;\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-shortcuts__list {\n    margin: 0 -1.5rem -0.5rem 0;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-shortcuts__list {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    flex-wrap: wrap;\n  }\n}\n\n.rf-header .rf-shortcuts__item {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  box-shadow: inset 0 -1px 0 0 var(--g300);\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-shortcuts__item {\n    padding: 0 0.75rem;\n    margin: 0 0 0.5rem;\n    box-shadow: none;\n  }\n  .rf-header .rf-shortcuts__item:not(:first-child) {\n    border-left: 1px solid var(--g300);\n  }\n}\n\n.rf-header .rf-shortcuts__item .rf-link {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 2rem;\n  padding: 0.25rem 0.75rem;\n  border-radius: 1rem;\n  flex-direction: row;\n  border-radius: 0;\n  min-width: 100%;\n  min-height: 3rem;\n  padding: 0.75rem 0;\n  max-height: none;\n  max-width: none;\n}\n\n.rf-header .rf-shortcuts__item .rf-link:not([class*='rf-fi-']) {\n  max-width: none;\n  max-height: none;\n}\n\n.rf-header .rf-shortcuts__item .rf-link::before {\n  font-size: 1rem;\n}\n\n.rf-header .rf-shortcuts__item .rf-link::before {\n  margin-left: -0.25rem;\n  margin-right: 0.5rem;\n}\n\n.rf-header .rf-shortcuts__item .rf-link::before {\n  margin-left: 0.25rem;\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-shortcuts__item .rf-link {\n    font-size: 0.875rem;\n    line-height: 1.5rem;\n    min-height: 2rem;\n    padding: 0.25rem 0.75rem;\n    border-radius: 1rem;\n    flex-direction: row;\n  }\n  .rf-header .rf-shortcuts__item .rf-link:not([class*='rf-fi-']) {\n    max-width: none;\n    max-height: none;\n  }\n  .rf-header .rf-shortcuts__item .rf-link::before {\n    font-size: 1rem;\n  }\n  .rf-header .rf-shortcuts__item .rf-link::before {\n    margin-left: -0.25rem;\n    margin-right: 0.5rem;\n  }\n}\n\n.rf-header .rf-search-bar {\n  margin-top: 1.25rem;\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-search-bar {\n    max-width: 23.667rem;\n    margin-top: 0;\n    margin-left: auto;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-nav {\n    margin: 0 calc(50% - 50vw);\n    padding: 0 calc(50vw - 50%);\n    justify-content: flex-start;\n  }\n  .rf-header .rf-nav__list {\n    max-width: calc(100% + 1rem);\n  }\n  .rf-header .rf-nav .rf-menu::after,\n  .rf-header .rf-nav .rf-mega-menu {\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.1), 0 8px 16px -16px rgba(0, 0, 0, 0.32);\n  }\n}\n\n.rf-header {\n  background-color: var(--w-g750);\n}\n\n.rf-header .rf-shortcuts__item {\n  box-shadow: inset 0 -1px 0 0 var(--g300);\n}\n\n@media (min-width: 62em) {\n  .rf-header .rf-shortcuts__item:not(:first-child) {\n    border-left: 1px solid var(--g300);\n  }\n}\n\n.rf-header__navbar::after {\n  background-color: var(--g300);\n}\n\n.rf-header__navbar .rf-service__title {\n  color: var(--g800);\n}\n\n.rf-header__navbar .rf-btn {\n  background-color: var(--t-plain);\n  color: var(--bf500);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) .rf-header__navbar .rf-btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-light\"] .rf-header__navbar .rf-btn,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .rf-header__navbar .rf-btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-dark\"] .rf-header__navbar .rf-btn,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .rf-header__navbar .rf-btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-soft\"] .rf-header__navbar .rf-btn,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-soft-\"] .rf-header__navbar .rf-btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root[data-rf-theme=\"dark\" i] .rf-header__navbar .rf-btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n.rf-header__navbar .rf-btn--menu, .rf-header__navbar .rf-btn.rf-fi-menu-fill {\n  color: var(--g700);\n}\n\n.rf-header .rf-nav {\n  box-shadow: inset 0 1px 0 0 var(--g300);\n}\n\n.rf-header .rf-btn.rf-fi-close-line {\n  background-color: var(--t-plain);\n  color: var(--bf500);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) .rf-header .rf-btn.rf-fi-close-line {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-light\"] .rf-header .rf-btn.rf-fi-close-line,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .rf-header .rf-btn.rf-fi-close-line {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-dark\"] .rf-header .rf-btn.rf-fi-close-line,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .rf-header .rf-btn.rf-fi-close-line {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-soft\"] .rf-header .rf-btn.rf-fi-close-line,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-soft-\"] .rf-header .rf-btn.rf-fi-close-line {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root[data-rf-theme=\"dark\" i] .rf-header .rf-btn.rf-fi-close-line {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n","/* ------------------------------------ *\\\n  HEADER\n\\* ------------------------------------ */\n\n@import './index';\n@import 'src/styles/module';\n@import 'src/styles/schemes';\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    font-size: #{$prepend} icon-size($icon-size);\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Links Tools : build\n/// @group links\n////\n\n%base-link {\n  @extend %inline-flex-center;\n\n  overflow: hidden;\n  @include z-index(over);\n}\n\n@function _sort-sizes($sizes) {\n  $sorted-map: (\n    md: map_get($sizes, md)\n  );\n\n  @each $size, $size-settings in $sizes {\n    @if $size != md {\n      $sorted-map: map-merge($sorted-map, ($size: $size-settings));\n    }\n  }\n\n  @return $sorted-map;\n}\n\n@mixin _build-link-placeholders($settings, $module, $border-radius:false) {\n  $align: #{$module}-align-on-content;\n  $sizes: _sort-sizes(map_get($settings, sizes));\n  $places: map_get($settings, places);\n\n  %#{$module}--md {\n    @extend %base-link;\n  }\n\n  @each $size, $size-settings in $sizes {\n    @at-root {\n      %#{$module}--#{$size} {\n        @include _build-link-size($size-settings, $border-radius);\n      }\n\n      %#{$align}--#{$size} {\n        @include _link-align-on-content($size, null, $size-settings);\n      }\n    }\n  }\n\n  @each $place in $places {\n    @each $size, $size-settings in $sizes {\n      @at-root {\n        %#{$module}--icon-#{$place}--#{$size} {\n          @include _build-link-icon($size-settings, $place, $size, $size == md, $place == right);\n        }\n\n        %#{$align}--#{$place}--#{$size} {\n          @include _link-align-on-content($size, $place, $size-settings);\n        }\n      }\n    }\n  }\n}\n\n@include _build-link-placeholders($links-settings, link, true);\n\n@mixin _build-link($settings, $module, $border-radius:false, $tags:button) {\n  $align: #{$module}-align-on-content;\n  $sizes: map_get($settings, sizes);\n  $places: map_get($settings, places);\n\n  @include disable-link-style;\n  @include margin(0);\n\n  @each $size, $size-settings in $sizes {\n    $placeholder: #{$module}--#{$size};\n\n    @if $size == md {\n      @extend %#{$placeholder};\n    }\n    @else {\n      &--#{$size} {\n        @extend %#{$placeholder};\n      }\n    }\n  }\n\n  $not-sided: ':not([class*=\"#{$module}--icon-\"])';\n\n  @if $places != null {\n    @each $place in $places {\n\n      @each $size, $size-settings in $sizes {\n        $placeholder: '#{$module}--icon-#{$place}--#{$size}';\n\n        @at-root #{&} {\n          @if $place == only {\n            @if $size == md {\n              &#{$not-sided} {\n                @include has-icon {\n                  @extend %#{$placeholder};\n                }\n              }\n            }\n            @else {\n              &--#{$size + $not-sided} {\n                @include has-icon {\n                  @extend %#{$placeholder};\n                }\n              }\n            }\n          }\n          @else {\n            @if $size == md {\n              &--icon-#{$place} {\n                @include has-icon {\n                  @extend %#{$placeholder};\n                }\n              }\n            }\n            @else {\n              &--#{$size}#{&}--icon-#{$place} {\n                @include has-icon {\n                  @extend %#{$placeholder};\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin build-link() {\n  @include _build-link($links-settings, link, true);\n}\n","////\n/// Links Tools : icons\n/// @group links\n////\n\n@mixin _build-link-icon($size-settings, $place, $size:md, $font-icon: false, $reverse: false) {\n\n  $icon-size: map_get($size-settings, icon);\n\n  @if $place == only {\n    $icon-size: map_get($size-settings, icon-only);\n  }\n\n  @if $font-icon {\n    @include font-icon(null, $icon-size, before);\n  }\n  @else {\n    @include before {\n      font-size: icon-size($icon-size);\n    }\n  }\n\n  @if $reverse {\n    flex-direction: row-reverse;\n  }\n  @else {\n    flex-direction: row;\n  }\n\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n  $icon-margin-x: space(map_get($size-settings, icon-margin-x));\n\n  @if $place == left {\n    @include before {\n      margin-left: -($icon-margin);\n      margin-right: $icon-margin-x;\n    }\n  }\n  @else if $place == right {\n    @include before {\n      margin-right: -($icon-margin);\n      margin-left: $icon-margin-x;\n    }\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    max-width: $min-height;\n    max-height: $min-height;\n    padding-left: $padding-x;\n    padding-right: $padding-x;\n\n    @include before {\n      margin-left: 0;\n      margin-right: $padding-x;\n    }\n  }\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Header Module\n/// @group header\n////\n\n#{ns(header)} {\n  @include disable-link-style;\n  @include disable-list-style;\n  @include size(100%);\n  @include shadow(md);\n\n  @include body {\n    @include relative;\n    @include display-flex(row, center, flex-start, wrap);\n    // @include margin(0 -3v);\n    // @include padding(3v 0);\n    @include margin(0 -3v);\n    @include margin(0 -4v, lg);\n    @include padding(6v 0, lg);\n\n    @include respond-from(lg) {\n      flex-wrap: nowrap;\n    }\n  }\n\n  @import 'modules/brand';\n  @import 'modules/modal';\n  @import 'modules/navbar';\n  @import 'modules/tools';\n  @import 'modules/shortcuts';\n  @import 'modules/search';\n  @import 'modules/nav';\n}\n","////\n/// Core Tools : Reset\n/// @group core\n////\n\n%a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin link-underline($prepend: '') {\n  box-shadow: #{$prepend} 0 1px 0 0 currentColor;\n}\n\n@mixin enable-link-style() {\n  --is-link: ;\n}\n\n@mixin disable-link-style() {\n  --is-link: false;\n}\n\n@mixin enlarge-link {\n  outline-width: 0 !important;\n  @include before(block, '') {\n    @include absolute(0, 0, 0, 0, 100%, 100%);\n    outline-offset: 2px;\n    outline-style: inherit;\n    outline-color: inherit;\n    outline-width: 2px;\n    @include z-index(over);\n  }\n}\n","////\n/// Core Tools : Reset list\n/// @group core\n////\n\n%list-reset {\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n@mixin enable-list-style() {\n  --is-list: ;\n}\n\n@mixin disable-list-style() {\n  --is-list: false;\n}\n\n@mixin remove-list-style($nested: false) {\n  @include padding-bottom(0);\n\n  & > li {\n    @include padding-bottom(0);\n    @include before(none, none) {\n      font-size: inherit;\n      font-weight: inherit;\n    }\n\n    @if $nested {\n      & > ol,\n      & > ul {\n        @include padding-top(0);\n        @include padding-left(0);\n\n        & > li {\n          @include text-style(md);\n          @include before {\n            @include padding-right(0);\n            font-size: inherit;\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tools : Global shadow\n/// @group core\n////\n\n@mixin shadow($type) {\n  box-shadow: map_get($shadows-settings, $type);\n}\n","////\n/// Core Settings : Global shadow\n/// @group core\n////\n\n$shadows-settings: (\n  sm: (0 1px 4px 0 rgba(0, 0, 0, 0.23), 0 2px 0 -2px rgba(0, 0, 0, 0.16), 0 1px 1px 0 rgba(0, 0, 0, 0.16)),\n  md: (0 8px 16px 0 rgba(0, 0, 0, 0.1), 0 8px 16px -16px rgba(0, 0, 0, 0.32)),\n  up: (0 -8px 16px 0 rgba(0, 0, 0, 0.1), 0 -8px 16px -16px rgba(0, 0, 0, 0.32))\n);\n","////\n/// Core Tools : Global list\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n\n%inline-flex-center {\n  @include display-flex(row, center, null, null, true);\n}\n","////\n/// Header Module : brand\n/// @group header\n////\n\n&__brand {\n  @include display-flex(row, center, flex-start, wrap);\n  @include margin-y(-4v, lg);\n  @include size(100%);\n\n  @include respond-from(lg) {\n    flex-wrap: nowrap;\n  }\n\n  @include after(block, '') {\n    order: 3;\n    @include size(100%);\n\n    @include respond-from(lg) {\n      content: none;\n    }\n  }\n}\n\n&__logo,\n&__operator,\n&__service {\n  @include padding(4v, lg);\n\n  &:not(:last-child) {\n    @include margin-right(2v, lg);\n  }\n}\n\n&__logo {\n  order: 1;\n  @include padding(3v);\n  @include logo(sm, null) {\n    @include margin(-1em);\n  }\n}\n\n&__operator {\n  @include padding(3v);\n  order: 2;\n\n  img {\n    display: block;\n  }\n}\n\n&__service {\n  @include padding-y(3v);\n  @include margin-x(3v);\n  @include margin-x(0, lg);\n  order: 4;\n  @include size(100%);\n  @include scheme-element-border-color(g300, true, top);\n\n  @include respond-from(lg) {\n    border-top: none;\n    width: auto;\n  }\n\n  &-title {\n    @include title-style(h6, false);\n  }\n\n  &-title,\n  &-tagline {\n    @include margin-bottom(0);\n  }\n}\n","////\n/// Logo Tools\n/// @group logo\n////\n\n@mixin logo-size($size) {\n  $font-size: map-get($logo-sizes, $size);\n  font-size: #{($font-size * 1.05)};\n\n  @include before {\n    @include size(#{2.75 * $font-size}, #{$font-size});\n    @include margin-bottom(#{($font-size / 3)});\n    background-size: #{2.75 * $font-size} #{1.125 * $font-size}, #{2.75 * $font-size} #{$font-size}, 0;\n    background-position: 0 #{(-0.0625 * $font-size)}, 0 0, 0 0;\n\n    @at-root :root#{ns-attr(mourning)} #{&} {\n      background-size: #{2.75 * $font-size} #{1.125 * $font-size}, 0, #{2.75 * $font-size} #{$font-size};\n    }\n  }\n\n  @include after {\n    min-width: #{2.625 * $font-size};\n    background-size: #{5.25 * $font-size} #{3.75 * $font-size};\n    background-position: 0 calc(100% + #{1.875 * $font-size});\n    padding-top: #{((53/24) * $font-size)};\n\n    @at-root :root#{ns-attr(theme, 'dark')} #{&} {\n      background-position: #{-2.625 * $font-size} 100%;\n    }\n  }\n}\n\n@mixin logo($size: md, $size-md: null) {\n  #{ns(logo)} {\n    @include logo-size($size);\n\n    @if $size-md != null {\n      @include respond-from(md) {\n        @include logo-size($size-md);\n      }\n    }\n\n    @content;\n  }\n}\n\n@function _color-marianne($blue, $red) {\n  $tmp: str-replace($svg-marianne, '$BLUE', $blue);\n  @return str-replace($tmp, '$RED', $red);\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Header Module : modal\n/// @group header\n////\n\n#{ns(modal)} {\n  pointer-events: initial;\n  display: block;\n  @include padding(18v 4v 0);\n  @include scheme-element-bg-color(w-g750);\n  overflow: auto;\n\n  &:not(#{ns(modal)}--opened) {\n    display: flex;\n\n    @include respond-from(lg) {\n      display: block;\n    }\n  }\n\n  #{ns(container)} {\n    pointer-events: initial;\n    @include padding(4v 4v 0);\n    @include padding(0 8v 4v, lg);\n\n    #{ns(grid-row)} {\n      @include margin(0 -2v);\n      @include margin(0 -4v, lg);\n    }\n  }\n\n  @include respond-from(lg) {\n    @include padding-top(0);\n    @include margin(0);\n    @include size(auto, auto);\n    visibility: visible;\n    opacity: 1;\n    position: initial;\n    background-color: transparent;\n    overflow: inherit;\n  }\n\n  > #{ns(link)}--close {\n    @include absolute(4v,4v);\n    display: flex;\n    @include respond-from(lg) {\n      display: none;\n    }\n  }\n}\n","////\n/// Header Module : navigation bar\n/// @group header\n////\n\n&__navbar {\n  @include display-flex(row,flex-end);\n  @include absolute(0, 0);\n  @include padding(1v);\n\n  @include respond-from(lg) {\n    display: none;\n  }\n\n  @include nest-btn(md, only) {\n    flex: 0 0 auto;\n    white-space: nowrap;\n\n    &--menu {\n      @include before {\n        @include font-icon-content(menu-fill);\n      }\n    }\n\n    &--search {\n      @include before {\n        @include font-icon-content(search-line);\n      }\n    }\n  }\n}\n","////\n/// Links Tools : link\n/// @group links\n////\n\n@mixin _extend-link($size, $place, $module, $align-on-content, $force-md) {\n  $align: #{$module}-align-on-content;\n\n  @if $size != md or $force-md {\n    @extend %#{$module}--#{$size};\n  }\n\n  @if $place != only {\n    max-width: none;\n    max-height: none;\n  }\n\n  @if $place != null {\n    $placeholder: #{$module}--icon-#{$place};\n\n    @extend %#{$placeholder}--md;\n\n    @if $size != md {\n      @extend %#{$placeholder}--#{$size};\n    }\n  }\n\n  @if $align-on-content {\n\n    @if $place == null {\n      @extend %#{$align}--#{$size};\n    }\n    @else {\n      @extend %#{$align}--#{$place}--#{$size};\n    }\n  }\n}\n\n@mixin _extend-responsive-link($from, $size, $place, $settings, $border-radius, $align-on-content) {\n  $sizes: map_get($settings, sizes);\n  $size-settings: map_get($sizes, $size);\n  @include respond-from($from) {\n\n    @include _build-link-size($size-settings, $border-radius);\n\n    @if $place != only {\n      &:not([class*='#{$prefix}-fi-']) {\n        max-width: none;\n        max-height: none;\n      }\n    }\n\n    @if $place == null {\n      @include before(null, none);\n    }\n    @else {\n      @include _build-link-icon($size-settings, $place, $size, false, $place == right);\n    }\n\n    @if $align-on-content {\n      @include _link-align-on-content($size, $place, $size-settings);\n    }\n\n    @content;\n  }\n}\n\n@mixin _nest-link($module, $size, $place: null, $icon: null, $from: null, $align-on-content: false, $settings: $links-settings, $border-radius: true, $force-md: false) {\n  #{ns($module)} {\n    @if $icon != null {\n      @include before {\n        @include font-icon-content($icon);\n      }\n    }\n\n    @if $from == null {\n      @include _extend-link($size, $place, $module, $align-on-content, $force-md);\n      @content;\n    }\n    @else {\n      @include _extend-responsive-link($from, $size, $place, $settings, $border-radius, $align-on-content) {\n        @content;\n      }\n    }\n  }\n}\n\n@mixin nest-link($size:md, $place: null, $icon:null, $from: null,  $align-on-content: false) {\n  @include _nest-link(link, $size, $place, $icon, $from, $align-on-content) {\n    @content;\n  }\n}\n\n@mixin icon-link($size: md, $place: null, $icon: null, $module: null, $align-on-content: false) {\n  @include _extend-link($size, $place, $module, $align-on-content, true);\n  @include before {\n    @include font-icon-content($icon);\n  }\n}\n","////\n/// Links Tools : sizes\n/// @group links\n////\n\n@mixin _build-link-size($size-settings, $border-radius: false) {\n  $font-size: map_get($size-settings, font-size);\n  $style: get-text-style($font-size);\n  $line-height: space(map_get($style, line-height));\n  font-size: px-rem($font-size);\n  line-height: $line-height;\n\n  $min-height: space(map_get($size-settings, min-height));\n  min-height: $min-height;\n\n  $max-icon-height: icon-size(md);\n\n  @if map_has_key($size-settings, icon-only) {\n    $max-icon-height: icon-size(map_get($size-settings, icon-only));\n  }\n  @else if map_has_key($size-settings, icon) {\n    $max-icon-height: icon-size(map_get($size-settings, icon));\n  }\n\n  $space-y: max($line-height, $max-icon-height);\n  $padding-x: space(map_get($size-settings, padding-x));\n\n  padding: #{($min-height - $space-y) / 2} #{$padding-x};\n\n  @if $border-radius {\n    border-radius: #{$min-height / 2};\n  }\n}\n\n@function _link-icon-margin($size) {\n  @return icon-size($size) / 4;\n}\n\n@mixin _link-align-on-content($size, $place, $size-settings) {\n  $padding-x: space(map_get($size-settings, padding-x));\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n\n  @if $place == null {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n  @else if $place == left {\n    margin-left: -($padding-x - $icon-margin);\n    margin-right: -($padding-x);\n  }\n  @else if $place == right {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x - $icon-margin);\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n}\n","////\n/// Header Module : shortcuts\n/// @group header\n////\n\n#{ns(shortcuts)} {\n\n  @include list {\n    @include display-flex(column);\n    @include margin(0 -6v -2v 0, lg);\n\n    @include respond-from(lg) {\n      @include display-flex(row, null, flex-end, wrap);\n    }\n  }\n\n  //TODO: icon dans le link, dépendance sur rf-links\n\n  @include list-item {\n    @include display-flex(row,center);\n    @include scheme-element-box-shadow-color(g300, true, inset 0 -1px 0 0 $COLOR);\n\n    @include respond-from(lg) {\n      @include padding(0 3v);\n      @include margin(0 0 2v);\n      box-shadow: none;\n\n      &:not(:first-child) {\n        @include scheme-element-border-color(g300, true, left);\n      }\n    }\n\n    @include nest-link(sm, left, null, true) {\n      border-radius: 0;\n      min-width: 100%;\n      min-height: 3rem;\n      @include padding(3v 0);\n      max-height: none;\n      max-width: none;\n\n      @include before {\n        @include margin-left(1v);\n      }\n    }\n\n    @include nest-link(sm, left, null, lg);\n  }\n}\n","////\n/// Schemes Module : Hover\n/// @group schemes\n////\n\n/// Définit les couleurs d'hover\n/// @access private\n/// @param {Color} $color - couleur de l'élément\n/// @param {Bool} $is-block - est-ce que cette définition se fait au niveau d'un block de combinaison ?\n@mixin _get-hover-vars($color, $is-block: false) {\n\n  @if opacity($color) != 0 {\n\n    $prop: color;\n\n    @if $is-block {\n      $prop: block-color;\n    }\n\n    --#{$prop}-hover: #{ _overlay-color($color, 1) };\n    --#{$prop}-active: #{ _overlay-color($color, 2) };\n  }\n  @else {\n    --color-hover: var(--block-color-hover);\n    --color-active: var(--block-color-active);\n  }\n}\n\n/// Applique le hover sur un élément\n/// @access private\n@mixin _scheme-element-hover() {\n  @media (hover: hover) and (pointer: fine) {\n    $selectors: ('&:not(a):not(:disabled)');\n    $a: selector-associate(&, 'a[href]');\n    @if length($a) {\n      $selectors: append($selectors, $a, 'comma');\n    }\n    @at-root #{$selectors} {\n      &:hover {\n        background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n      }\n\n      &:active {\n        background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n      }\n    }\n  }\n}\n\n@mixin remove-hover() {\n  &:hover,\n  &:active {\n    &:not([disabled]),\n    &:not(:disabled) {\n      background-image: none;\n    }\n  }\n}\n","////\n/// header Schemes\n/// @group header\n////\n\n#{ns(header)} {\n  @include scheme-element-bg-color(w-g750, true);\n\n  //TODO: ADD popin schemes after header modal refacto\n\n  #{ns(shortcuts)} {\n    @include list-item {\n      @include scheme-element-box-shadow-color(g300, true, inset 0 -1px 0 0 $COLOR);\n\n      @include respond-from(lg) {\n        &:not(:first-child) {\n          @include scheme-element-border-color(g300, true, left);\n        }\n      }\n    }\n  }\n\n  &__navbar {\n    @include after {\n      @include scheme-element-bg-color(g300, true);\n    }\n\n    #{ns(service)} {\n      @include title {\n        @include scheme-element-text-color(g800, true);\n      }\n    }\n\n    #{ns(btn)} {\n      @include scheme-element-bg-color(t-plain, false, override);\n      @include scheme-element-text-color(bf500);\n\n      &--menu,\n      &#{ns(fi-menu-fill)} {\n        @include scheme-element-text-color(g700);\n      }\n    }\n  }\n\n  #{ns(nav)} {\n    @include scheme-element-box-shadow-color(g300, true, inset 0 1px 0 0 $COLOR);\n  }\n\n  //TODO: changer en rf-link--close\n  #{ns(btn) + ns(fi-close-line)} {\n    @include scheme-element-bg-color(t-plain, false, override);\n    @include scheme-element-text-color(bf500, false);\n  }\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Header Module : tools\n/// @group header\n////\n\n&__tools {\n  @include respond-from(lg) {\n    flex-direction: column;\n    align-items: flex-end;\n    text-align: right;\n    @include padding-x(4v);\n    @include margin-left(auto);\n    flex: 1 0 auto;\n\n    #{ns(shortcuts)} + #{ns(search-bar)} {\n      @include margin-top(4v);\n    }\n  }\n\n  &#{ns(modal)} {\n    @include margin-left(auto, lg);\n  }\n}\n","////\n/// Header Module : search bar\n/// @group header\n////\n\n#{ns(search-bar)} {\n  @include margin-top(5v);\n\n  @include respond-from(lg) {\n    @include max-size(23.667rem);\n    @include margin-top(0);\n    @include margin-left(auto);\n  }\n}\n","////\n/// Header Module : navigation\n/// @group header\n////\n\n#{ns(nav)} {\n  @include respond-from(lg) {\n    @include margin(0 calc(50% - 50vw));\n    @include padding(0 calc(50vw - 50%));\n    justify-content: flex-start;\n\n    &__list {\n      max-width: calc(100% + #{space(4v)});\n    }\n\n    #{ns(menu)}::after,\n    #{ns(mega-menu)} {\n      @include shadow(md);\n    }\n  }\n}\n"]}