{"version":3,"sources":["<no source>","../../../navigation.css","../../../../../packages/navigation/main.scss","../../../../../packages/navigation/src/styles/modules/_nav.scss","../../../../../packages/core/src/styles/reset/tools/_link.scss","../../../../../packages/core/src/styles/reset/tools/_lists.scss","../../../../../packages/core/src/styles/global/misc/z-index/_tools.scss","../../../../../packages/core/src/styles/global/misc/z-index/_settings.scss","../../../../../packages/core/src/styles/global/tools/_blocks.scss","../../../../../packages/core/src/styles/global/tools/_display.scss","../../../../../packages/core/src/styles/spacing/tools/_space.scss","../../../../../packages/core/src/styles/spacing/tools/_position.scss","../../../../../packages/core/src/styles/global/tools/_pseudo.scss","../../../../../packages/core/src/styles/spacing/tools/_size.scss","../../../../../packages/core/src/styles/typography/tools/_styles.scss","../../../../../packages/core/src/styles/icons/_tools.scss","../../../../../packages/core/src/styles/global/functions/_units.scss","../../../../../packages/navigation/src/styles/modules/_menu.scss","../../../../../packages/navigation/src/styles/modules/_mega-menu.scss","../../../../../packages/core/src/styles/global/tools/_selectors.scss","../../../../../packages/navigation/src/styles/_schemes.scss","../../../../../packages/schemes/src/styles/tools/_element.scss","../../../../../packages/core/src/styles/global/functions/_strings.scss","../../../../../packages/schemes/src/styles/tools/_hover.scss","../../../../../packages/core/src/styles/global/misc/breakpoints/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACAhB;;yCDGyC;;AEEzC;ECcE,gBAAU;ECDV,gBAAU;ECFV,aCDS;ANPX;;AKaM;EAEE,aAAS;ALVjB;;AERA;EAMI,eAAe;AFMnB;;AEZA;EAUI,aAAa;AFMjB;;AOHE;ECPE,aAAa;EAIb,sBAAgB;EC+DhB,SP1DiB;EO0DjB,UPzDkB;EQfpB,kBAAU;AVuBZ;;AOLE;EEsDE,SP9CiB;EMrBjB,aAAa;EAIb,sBAAgB;EAIhB,uBAAa;ENeb,cAAc;AFWlB;;AWnCU;EAOJ,aT2BwB;AFc9B;;AOlCG;ECbC,aAAa;EAQb,mBAAa;EAIb,8BAAiB;EIff,WAAO;EHsET,kBPpBuB;EWlCzB,eAA6C;EAG3C,mBAA6D;EXiC3D,gBAAgB;EAChB,iBAAiB;AFkBvB;;AWrEU;EF0DJ,ePJyB;AFmB/B;;AO3DG;ELuDG,mBAAmB;EACnB,gBAAgB;EAChB,gBAAgB;AFuBtB;;AW9FU;EAOJ,aTkE0B;AFyBhC;;AOpFG;EL+DG,2BAA2B;AFyBjC;;AWtGU;EGyDF,6BAA6B;EAC7B,kBAAkB;EAClB,8BAA8B;EAC9B,oBAAoB;EACpB,oBAAoB;EACpB,cAAc;AduDtB;;AWrHU;EG0EN,eCzD8C;ED4B9C,YAAqB;ELanB,mBAhCkB;EAgClB,ePwByB;EACvB,0BAA0B;AF0ClC;;AW7HU;ETwFA,0BAA0B;AFyCpC;;AWjIU;EAOJ,aToF2B;AF0CjC;;AEtCI;EQnGF,kBAAU;AV6IZ;;AWzIU;EAGJ,cAAS;EAIT,WT2FyB;EQtG7B,kBAAU;EAER,YAAK;EASL,WAAM;EETJ,UAAO;EAGP,cAAQ;AZkJd;;AEpDK;EAYG,oBAAoB;EACpB,eAAe;AFkDvB;;AgBnKA;EXWE,aCHU;EGiER,eA1CoB;EA0CpB,eA1CoB;EG5BlB,WAAO;EIEX,uBAAuB;AhBsKzB;;AK3JM;EAEE,aAAS;AL8JjB;;AOnKE;EE4DE,SOpDiB;EPoDjB,wBA1CoB;EG5BlB,YAAO;AZwMb;;AOxLE;EGlBA,kBAAU;EDwER,SO5CiB;AhByLrB;;AOnMG;EMAD,mBAA6C;EAG3C,mBAA6D;EJmD7D,qBA1CoB;EOIlB,gBAAgB;EAChB,gBAAgB;AhB2LtB;;AW1NU;EAOJ,aK0ByB;AhB6L/B;;AOhNG;ESuBG,cAAc;EP+BhB,sBA1CoB;EOalB,gBAAgB;AhB6LtB;;AWpOU;EAOJ,WKoDwB;EN/D5B,kBAAU;EAER,MAAK;EAML,SAAQ;EAGR,OAAM;EETJ,UAAO;EHsET,cOPwB;AhBiM5B;;AiBnQA;EZWE,aCHU;EGiER,mBQvEuB;ERuEvB,eA1CoB;AT0OxB;;AKzPM;EAEE,aAAS;AL4PjB;;AiB9QA;EAYI,aAAa;AjBiRjB;;AiB7RA;ERyEI,oBQzDwB;AjBiR5B;;AW5RU;EAGJ,cAAS;EAIT,WMQuB;ER2CvB,qBAhCkB;AToRxB;;AiBnTA;EAoCI,aAAa;ER2BX,iBQzBuB;ERyBvB,mBAhCkB;ATgTxB;;AkBxUY;EDyCN,aAAa;AjBySnB;;AiBjSE;EPvDA,kBAAU;EDwER,eA1CoB;ATqUxB;;AiB5SG;ERiBC,qBA1CoB;EIZtB,mBAA6C;EAG3C,mBAA6D;EImD3D,iBAAiB;EACjB,gBAAgB;EAChB,gBAAgB;AjBuTtB;;AiB1UG;EAwBG,cAAc;ERPhB,sBA1CoB;EQmDlB,gBAAgB;AjB6TtB;;AW1YU;EAOJ,aM4E0B;AjBiUhC;;AWpZU;EAOJ,WMgFwB;EP3F5B,kBAAU;EAER,MAAK;EAML,SAAQ;EAGR,OAAM;EETJ,UAAO;EHsET,iBQqBwB;AjBqU5B;;AOtZE;EE4DE,sBA1CoB;AT8YxB;;AO1ZE;EGlBA,kBAAU;EDwER,SQkCiB;AjB6UrB;;AWnbU;EAOJ,aMqGwB;AjBiV9B;;AO/aG;EEsDC,qBA1CoB;EIZtB,mBAA6C;EAG3C,mBAA6D;EIkG3D,gBAAgB;EAChB,gBAAgB;AjBkVtB;;AWtcU;EAOJ,aM+G0B;AjB2VhC;;AOncG;EEsDC,sBA1CoB;EQkGlB,cAAc;EACd,gBAAgB;AjB0VtB;;AWvdU;EAOJ,WM0HwB;EPrI5B,kBAAU;EAER,MAAK;EAML,SAAQ;EAGR,OAAM;EETJ,UAAO;EHsET,iBQ+DwB;AjBoW5B;;AmB5eA;;EnBsfE;;AmBlfA;ECgDA,kBC8BsG;ED9BtG,gCC8BsG;ArBwaxG;;AoB/dM;;EETF,uCAAc;EACd,yCAAe;AtBqfnB;;AoB7eM;;;;EETF,uCAAc;EACd,yCAAe;AtB4fnB;;AoBpfM;;;;EETF,uCAAc;EACd,yCAAe;AtBmgBnB;;AoB3fM;;;;EETF,uCAAc;EACd,yCAAe;AtB0gBnB;;AoBhfM;EE3BF,uCAAc;EACd,yCAAe;AtB+gBnB;;AO/gBE;EaiCA,wCC8BsG;ArB2dxG;;AWxiBU;ES+CR,8BC8BsG;ArB+dxG;;AmB3hBK;EC8BH,mBC8BsG;ArBoexG;;AmB/gBA;;EnB0hBE;;AW5jBsB;ES+CtB,mBC8BsG;ArB8fxG;;AmBthBK;EAGG,mBAAmB;AnBuhB3B;;AW/kBU;EQ2DF,8BAA8B;AnBwhBtC;;AmBlhBA;;EnBshBE;;AiB5lBF;EGoDE,+BC8BsG;ArB6gBxG;;AmB9fK;EC7CH,mBC8BsG;ArB8hBxG;;AW3mBU;EAOJ,WQ2FwB;EACtB,8BAA8B;AnB6gBtC;;AmBvgBK;EC1DH,mBC8BsG;ArBwiBxG;;AWrnBU;EAOJ,WQwGwB;EACtB,8BAA8B;AnB0gBtC;;AuBlnBI;EhBAF;ILOI,mBAAmB;IACnB,iBAAiB;IOoDnB,eA1CoB;ETAtB;;EOZA;ILaI,gBAAgB;EFapB;;EEXI;IACE,qBAAqB;EFa3B;;EO7BC;;;IE4CG,oBAhCkB;ET6BtB;;EOzCC;IEsDC,aA1CoB;IA0CpB,SPTqB;IU7DnB,WAAO;IAGP,YAAQ;IV4DN,2BAA2B;IAC3B,mBAAmB;IACnB,kBOrCgB;IIZtB,mBAA6C;IAG3C,mBAA6D;EbsE/D;;EOzEC;IEsDC,+BA1CoB;ETiFtB;;EW3GQ;IAOJ,aTgG4B;EFiDhC;;EgB7JF;INCE,kBAAU;IAER,SAAK;ID4DH,oBAhCkB;IAgClB,oBAhCkB;IOpBpB,uBAAuB;EhB8KzB;;EWpLQ;IAGJ,cAAS;IAIT,WKCsB;INZ1B,kBAAU;IAER,MAAK;IAGL,QAAO;IAGP,SAAQ;IAGR,OAAM;ID6DN,yBA1CoB;IJpBtB,WCPS;ENgMT;;EOvLA;IE4DE,iBA1CoB;ETiLtB;;EW3MQ;IAGJ,cAAS;IAIT,WKqC0B;INhD9B,kBAAU;IAER,MAAK;IAGL,QAAO;IAMP,OAAM;IENJ,WAAQ;IHmEV,cA1CoB;ETsNtB;;EWhPQ;;IKqDA,aAAa;EhB8LrB;;EiBxPF;IPCE,kBAAU;IAER,SAAK;IASL,sBAAM;IETJ,YAAO;IHsET,gBQlEwB;IRkExB,UQjEkB;EjBgRpB;;EiBxRF;IRyEI,oBA1CoB;ETuQtB;;EWjSQ;IFkDJ,kBAxBkB;IAyBlB,mBAzBkB;ET0RtB;;EWpTQ;IF0DJ,mBAhCkB;ETgStB;;EiB/TF;IPCE,kBAAU;EVoUV;;EWhUQ;ICCJ,WAAQ;EZkUZ;;EiBxUF;IA0CM,aAAa;EjB0SjB;;EkB7UU;ID4CJ,cAAc;EjB2SpB;;EiBtSA;IRiBE,SQdiB;EjB8SnB;;EWpWQ;IAGJ,cAAS;IAIT,WMkDwB;IP7D5B,kBAAU;IAKR,QAAO;IAGP,SAAQ;IAGR,OAAM;IENJ,WAAQ;IHyDR,mBAhCkB;IAgClB,oBAhCkB;ETwVtB;;EiB/TC;IRiBC,uBA1CoB;ETyWtB;;EiBhVC;IRiBC,wBA1CoB;ETqXtB;;EW/YQ;IFoEN,gBQsBwB;EjByU1B;;EO3ZA;IE4DE,mBQ6BsB;EjB4UxB;;EO/ZA;IEsDE,oBQqC0B;EjB+U5B;;EO1aC;IEsDC,uBA1CoB;ETkbtB;;EO9bC;IEsDC,wBA1CoB;ETkctB;;EW5dQ;IFoEN,gBQgEwB;EjBwW1B;;EmBveC;IC0CD,yBC8BsG;ID9BtG,oCC8BsG;ErBsdtG;;EmBlhBG;IC8BH,yCC8BsG;ErB0etG;;EWvjBQ;IS+CR,+BC8BsG;ErBmftG;;EWhkBQ;IS+CR,6BC8BsG;ErByftG;;EWtkBQ;IS+CR,oCC8BsG;ErBkhBtG;;EW/lBQ;IS+CR,6BC8BsG;ErBwhBtG;AA1kBF;;AuBnBI;ENbJ;IRyEI,iBA1CoB;ET6QtB;AACF;;AsBnRE;EAOI;;IACE,+EAA+E;EtB6drF;;EsB1dI;;IACE,iFAAiF;EtB4dvF;AACF","file":"navigation.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  NAVIGATION\n\\* ------------------------------------ */\n.rf-nav {\n  --is-link: false;\n  --is-list: false;\n  z-index: 3500;\n}\n\n.rf-nav *:focus,\n.rf-nav *:focus-visible {\n  z-index: 4000;\n}\n\n.rf-nav a:not([href]) {\n  cursor: default;\n}\n\n.rf-nav > .rf-link--close {\n  display: none;\n}\n\n.rf-nav__list {\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n\n@media (min-width: 62em) {\n  .rf-nav__list {\n    flex-direction: row;\n    flex-wrap: nowrap;\n    margin: 0 -1rem;\n  }\n}\n\n.rf-nav__item {\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  flex: 0 1 auto;\n}\n\n@media (min-width: 62em) {\n  .rf-nav__item {\n    box-shadow: none;\n  }\n  .rf-nav__item--align-right {\n    align-items: flex-end;\n  }\n}\n\n.rf-nav__item::before {\n  content: none;\n}\n\n@media (min-width: 62em) {\n  .rf-nav__item:first-child:nth-last-child(2) ~ .rf-nav__item,\n  .rf-nav__item:first-child:nth-last-child(3) ~ .rf-nav__item,\n  .rf-nav__item:first-child:nth-last-child(4) ~ .rf-nav__item {\n    margin-left: 1.25rem;\n  }\n}\n\n.rf-nav__item > .rf-nav__link,\n.rf-nav__item > .rf-nav__btn {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding: 0.75rem 0;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  text-align: left;\n  font-weight: bold;\n}\n\n.rf-nav__item > .rf-nav__link::before, .rf-nav__item > .rf-nav__btn::before {\n  margin-right: 0;\n}\n\n@media (min-width: 62em) {\n  .rf-nav__item > .rf-nav__link,\n  .rf-nav__item > .rf-nav__btn {\n    padding: 1rem;\n    margin: 0;\n    width: auto;\n    height: 100%;\n    justify-content: flex-start;\n    font-weight: normal;\n    min-height: 3.5rem;\n    font-size:  0.875rem ;\n    line-height:  1.5rem ;\n  }\n}\n\n.rf-nav__item > .rf-nav__link {\n  flex-direction: row;\n  box-shadow: none;\n  border-radius: 0;\n}\n\n.rf-nav__item > .rf-nav__link::before {\n  content: none;\n}\n\n.rf-nav__item > .rf-nav__btn {\n  flex-direction: row-reverse;\n}\n\n@media (min-width: 62em) {\n  .rf-nav__item > .rf-nav__btn {\n    padding: 1rem 0.75rem 1rem 1rem;\n  }\n}\n\n.rf-nav__item > .rf-nav__btn::before {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.rf-nav__item > .rf-nav__btn::before {\n  font-size:  1rem;\n  content:  \"ï„ˆ\";\n  margin-left: 0.5rem;\n  margin-right: 0;\n  transition: transform 0.3s;\n}\n\n.rf-nav__item > .rf-nav__btn[aria-expanded=\"true\" i]::before {\n  transform: rotate(-180deg);\n}\n\n.rf-nav__item > .rf-nav__btn[aria-expanded=\"true\" i]::after {\n  content: none;\n}\n\n.rf-nav__item--active {\n  position: relative;\n}\n\n.rf-nav__item--active::before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 0.75rem;\n  left: -1rem;\n  width: 2px;\n  height: 1.5rem;\n}\n\n@media (min-width: 62em) {\n  .rf-nav__item--active::before {\n    content: none;\n  }\n}\n\n.rf-nav__item--active > .rf-nav__link {\n  pointer-events: none;\n  cursor: default;\n}\n\n.rf-menu {\n  z-index: 2500;\n  margin: 0 -1rem;\n  padding: 0 1rem;\n  width: auto;\n  box-sizing: content-box;\n}\n\n.rf-menu *:focus,\n.rf-menu *:focus-visible {\n  z-index: 3000;\n}\n\n@media (min-width: 62em) {\n  .rf-menu {\n    position: absolute;\n    top: 100%;\n    margin-top: -0.25rem;\n    padding-top: 0.25rem;\n    box-sizing: content-box;\n  }\n  .rf-menu::after {\n    display: block;\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: 0.25rem 1rem 2rem;\n    z-index: -1;\n  }\n}\n\n.rf-menu__list {\n  margin: 0;\n  padding: 0.5rem 0 1.5rem;\n  width: 20rem;\n}\n\n@media (min-width: 62em) {\n  .rf-menu__list {\n    padding: 0 0 2rem;\n  }\n}\n\n.rf-menu__item {\n  position: relative;\n  margin: 0;\n}\n\n.rf-menu__item,\n.rf-menu__item > .rf-nav__link {\n  font-size:  0.875rem ;\n  line-height:  1.5rem ;\n  padding: 0.75rem 1rem;\n  text-align: left;\n  box-shadow: none;\n}\n\n.rf-menu__item::before, .rf-menu__item > .rf-nav__link::before {\n  content: none;\n}\n\n.rf-menu__item > .rf-nav__link {\n  display: block;\n  margin: -0.75rem -1rem;\n  border-radius: 0;\n}\n\n@media (min-width: 62em) {\n  .rf-menu__item:not(:first-child)::after {\n    display: block;\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n    height: 1px;\n    margin: 0 1rem;\n  }\n  .rf-menu__item:not(.rf-menu__item--active):hover::after, .rf-menu__item:not(.rf-menu__item--active):hover + .rf-menu__item::after {\n    display: none;\n  }\n}\n\n.rf-menu__item--active::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 2px;\n  margin: 1rem 0;\n}\n\n.rf-mega-menu {\n  z-index: 2500;\n  margin: 0 -1rem 1px;\n  padding: 0 1rem;\n}\n\n.rf-mega-menu *:focus,\n.rf-mega-menu *:focus-visible {\n  z-index: 3000;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu {\n    position: absolute;\n    top: 100%;\n    left: calc(50% - 50vw);\n    width: 100vw;\n    margin: -2px 0 0;\n    padding: 0;\n  }\n}\n\n.rf-mega-menu:focus {\n  outline: none;\n}\n\n.rf-mega-menu > .rf-container {\n  padding: 1rem 1rem 0;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu > .rf-container {\n    padding: 0 2rem 1rem;\n  }\n}\n\n@media (min-width: 78em) {\n  .rf-mega-menu > .rf-container {\n    padding: 0 0 1rem;\n  }\n}\n\n.rf-mega-menu > .rf-container::before {\n  display: block;\n  content: \"\";\n  margin-bottom: 0.5rem;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu > .rf-container::before {\n    margin-left: -1rem;\n    margin-right: -1rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu > .rf-container::before {\n    margin-bottom: 1rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu > .rf-container {\n    position: relative;\n  }\n  .rf-mega-menu > .rf-container::before {\n    height: 2px;\n  }\n}\n\n.rf-mega-menu .rf-link--close {\n  display: none;\n  margin-left: auto;\n  margin-right: -1rem;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu .rf-link--close {\n    display: flex;\n  }\n}\n\n.rf-mega-menu p:not([class^=\"rf-h\"]):not([class*=\" rf-h\"]) {\n  display: none;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu p:not([class^=\"rf-h\"]):not([class*=\" rf-h\"]) {\n    display: block;\n  }\n}\n\n.rf-mega-menu__category {\n  position: relative;\n  margin: 0 -1rem;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__category {\n    margin: 0;\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__category::after {\n    display: block;\n    content: \"\";\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    height: 1px;\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n  }\n}\n\n.rf-mega-menu__category,\n.rf-mega-menu__category > .rf-nav__link {\n  padding: 0.75rem 1rem;\n  font-size:  0.875rem ;\n  line-height:  1.5rem ;\n  font-weight: bold;\n  text-align: left;\n  box-shadow: none;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__category,\n  .rf-mega-menu__category > .rf-nav__link {\n    padding: 0.75rem 0.5rem;\n  }\n}\n\n.rf-mega-menu__category > .rf-nav__link {\n  display: block;\n  margin: -0.75rem -1rem;\n  border-radius: 0;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__category > .rf-nav__link {\n    margin: -0.75rem -0.5rem;\n  }\n}\n\n.rf-mega-menu__category > .rf-nav__link::before {\n  content: none;\n}\n\n.rf-mega-menu__category--active::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 2px;\n  margin: 0.75rem 0;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__category--active::before {\n    margin: 0.5rem 0;\n  }\n}\n\n.rf-mega-menu__list {\n  margin: 0 -1rem 0.5rem;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__list {\n    margin: 0.75rem 0 0;\n  }\n}\n\n.rf-mega-menu__item {\n  position: relative;\n  margin: 0;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__item {\n    margin: 0 0 0.5rem 0;\n  }\n}\n\n.rf-mega-menu__item::before {\n  content: none;\n}\n\n.rf-mega-menu__item,\n.rf-mega-menu__item > .rf-nav__link {\n  padding: 0.75rem 1rem;\n  font-size:  0.875rem ;\n  line-height:  1.5rem ;\n  text-align: left;\n  box-shadow: none;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__item,\n  .rf-mega-menu__item > .rf-nav__link {\n    padding: 0.25rem 0.5rem;\n  }\n}\n\n.rf-mega-menu__item::before, .rf-mega-menu__item > .rf-nav__link::before {\n  content: none;\n}\n\n.rf-mega-menu__item > .rf-nav__link {\n  margin: -0.75rem -1rem;\n  display: block;\n  border-radius: 0;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__item > .rf-nav__link {\n    margin: -0.25rem -0.5rem;\n  }\n}\n\n.rf-mega-menu__item--active::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 2px;\n  margin: 0.75rem 0;\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__item--active::before {\n    margin: 0.5rem 0;\n  }\n}\n\n/**\n* nav\n**/\n.rf-nav__link, .rf-nav__btn {\n  color: var(--g800);\n  background-color: var(--t-plain);\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .rf-nav__link:not(a):not(:disabled):hover, a.rf-nav__link[href]:hover, a.rf-nav__btn[href]:hover, .rf-nav__btn:not(a):not(:disabled):hover {\n    background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n  }\n  .rf-nav__link:not(a):not(:disabled):active, a.rf-nav__link[href]:active, a.rf-nav__btn[href]:active, .rf-nav__btn:not(a):not(:disabled):active {\n    background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n  }\n}\n\n:root:not([data-rf-theme=\"dark\" i]) .rf-nav__link, :root:not([data-rf-theme=\"dark\" i]) .rf-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-light\"] .rf-nav__link, :root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-light\"] .rf-nav__btn,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .rf-nav__link,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .rf-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-dark\"] .rf-nav__link, :root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-dark\"] .rf-nav__btn,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .rf-nav__link,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .rf-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-soft\"] .rf-nav__link, :root:not([data-rf-theme=\"dark\" i]) [class*=\"rf-scheme-soft\"] .rf-nav__btn,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-soft-\"] .rf-nav__link,\n:root:not([data-rf-theme=\"dark\" i]) [class*=\"--scheme-soft-\"] .rf-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root[data-rf-theme=\"dark\" i] .rf-nav__link, .rf-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n@media (min-width: 62em) {\n  .rf-nav__btn[aria-expanded=\"true\" i] {\n    color: var(--bf500-plain);\n    background-color: var(--bf200-bf300);\n  }\n}\n\n.rf-nav__item {\n  box-shadow: inset 0 -1px 0 0 var(--g300);\n}\n\n.rf-nav__item--active::before {\n  background-color: var(--bf500);\n}\n\n.rf-nav__item--active > .rf-nav__link,\n.rf-nav__item--active > .rf-nav__btn {\n  color: var(--bf500);\n}\n\n@media (min-width: 62em) {\n  .rf-nav__item--active > .rf-nav__link,\n  .rf-nav__item--active > .rf-nav__btn {\n    box-shadow: inset 0 -2px 0 0 var(--bf500);\n  }\n}\n\n/**\n* menu\n**/\n@media (min-width: 62em) {\n  .rf-menu::after {\n    background-color: var(--w-g750);\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-menu__item:not(:last-child)::after {\n    background-color: var(--g300);\n  }\n}\n\n.rf-menu__item--active {\n  color: var(--bf500);\n}\n\n.rf-menu__item--active .rf-nav__link {\n  color: currentColor;\n}\n\n.rf-menu__item--active::before {\n  background-color: currentColor;\n}\n\n/**\n* mega-menu\n**/\n.rf-mega-menu {\n  background-color: var(--w-g750);\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu > .rf-container::before {\n    background-color: var(--bf200-bf300);\n  }\n}\n\n@media (min-width: 62em) {\n  .rf-mega-menu__category::after {\n    background-color: var(--g300);\n  }\n}\n\n.rf-mega-menu__category--active,\n.rf-mega-menu__category--active > .rf-nav__link {\n  color: var(--bf500);\n}\n\n.rf-mega-menu__category--active::before {\n  content: \"\";\n  background-color: currentColor;\n}\n\n.rf-mega-menu__item--active,\n.rf-mega-menu__item--active > .rf-nav__link {\n  color: var(--bf500);\n}\n\n.rf-mega-menu__item--active::before {\n  content: \"\";\n  background-color: currentColor;\n}\n","/* ------------------------------------ *\\\n  NAVIGATION\n\\* ------------------------------------ */\n\n@import './index';\n@import './src/styles/module';\n@import './src/styles/schemes';\n","////\n/// Navigation Module : Nav\n/// @group navigation\n////\n\n#{ns(nav)} {\n  @include disable-link-style;\n  @include disable-list-style;\n  @include z-index(nav, true);\n\n  a:not([href]) {\n    cursor: default;\n  }\n\n  > #{ns(link)}--close {\n    display: none;\n  }\n\n  @include list {\n    @include display-flex(column);\n    @include margin(0);\n    @include padding(0);\n    @include relative;\n\n    @include respond-from(lg) {\n      flex-direction: row;\n      flex-wrap: nowrap;\n      @include margin(0 -4v);\n    }\n  }\n\n  @include list-item {\n    @include margin(0);\n    @include display-flex(column, flex-start);\n    flex: 0 1 auto;\n\n    @include respond-from(lg) {\n      box-shadow: none;\n\n      &--align-right {\n        align-items: flex-end;\n      }\n    }\n\n    @include before(null, none);\n\n    @include respond-from(lg) {\n      &:first-child:nth-last-child(2) ~ &,\n      &:first-child:nth-last-child(3) ~ &,\n      &:first-child:nth-last-child(4) ~ & {\n        @include margin-left(5v);\n      }\n    }\n\n    & > #{ns(nav__link)},\n    & > #{ns(nav__btn)} {\n      @include display-flex(null, center, space-between);\n      @include size(100%);\n      @include padding(3v 0);\n      @include text-style(md);\n      text-align: left;\n      font-weight: bold;\n\n      @include before() {\n        @include margin-right(0);\n      }\n\n      @include respond-from(lg) {\n        @include padding(4v);\n        @include margin(0);\n        @include size(auto, 100%);\n        justify-content: flex-start;\n        font-weight: normal;\n        min-height: space(14v);\n        @include text-style(sm);\n      }\n    }\n\n    & > #{ns(nav__link)} {\n      flex-direction: row;\n      box-shadow: none;\n      border-radius: 0;\n\n      @include before(null, none);\n    }\n\n    & > #{ns(nav__btn)} {\n      flex-direction: row-reverse;\n      @include padding(4v 3v 4v 4v, lg);\n\n      @include font-icon(arrow-down-s-line, sm) {\n        @include margin-left(2v);\n        @include margin-right(0);\n        transition: transform 0.3s;\n      }\n\n      &[aria-expanded=\"true\" i] {\n        @include before {\n          transform: rotate(-180deg);\n        }\n\n        @include after(null, none);\n      }\n    }\n\n    &--active {\n      @include relative;\n\n      @include before(block, '') {\n        @include absolute(3v, null, null, -4v, 2px, 6v);\n      }\n\n      @include respond-from(lg) {\n        @include before(null, none);\n      }\n\n      & > #{ns(nav__link)} {\n        pointer-events: none;\n        cursor: default;\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Reset\n/// @group core\n////\n\n%a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin link-underline($prepend: '') {\n  box-shadow: #{$prepend} 0 1px 0 0 currentColor;\n}\n\n@mixin enable-link-style() {\n  --is-link: ;\n}\n\n@mixin disable-link-style() {\n  --is-link: false;\n}\n\n@mixin enlarge-link {\n  outline-width: 0 !important;\n  @include before(block, '') {\n    @include absolute(0, 0, 0, 0, 100%, 100%);\n    outline-offset: 2px;\n    outline-style: inherit;\n    outline-color: inherit;\n    outline-width: 2px;\n    @include z-index(over);\n  }\n}\n","////\n/// Core Tools : Reset list\n/// @group core\n////\n\n%list-reset {\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n@mixin enable-list-style() {\n  --is-list: ;\n}\n\n@mixin disable-list-style() {\n  --is-list: false;\n}\n\n@mixin remove-list-style($nested: false) {\n  @include padding-bottom(0);\n\n  & > li {\n    @include padding-bottom(0);\n    @include before(none, none) {\n      font-size: inherit;\n      font-weight: inherit;\n    }\n\n    @if $nested {\n      & > ol,\n      & > ul {\n        @include padding-top(0);\n        @include padding-left(0);\n\n        & > li {\n          @include text-style(md);\n          @include before {\n            @include padding-right(0);\n            font-size: inherit;\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Settings : z-index\n/// @group core\n////\n\n/// Liste des z-index prÃ©sent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  modal: 4500,\n  modal-focus: 5000,\n  modal-footer: 5500,\n  modal-footer-focus: 6000,\n);\n","////\n/// Core Tools : Global list\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n\n%inline-flex-center {\n  @include display-flex(row, center, null, null, true);\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriÃ©tÃ© Ã  appliquer Ã  l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut Ãªtre une liste si la direction n'est pas renseignÃ©e\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    font-size: #{$prepend} icon-size($icon-size);\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numÃ©rique sans unitÃ©.\n/// @access public\n/// @param {String} $value - la valeur avec unitÃ©\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Navigation Module : Menu\n/// @group navigation\n////\n\n#{ns(menu)} {\n  @include z-index(menu, true);\n  @include margin(0 -4v);\n  @include padding(0 4v);\n  @include size(auto);\n  box-sizing: content-box;\n\n  @include respond-from(lg) {\n    @include absolute(100%);\n    @include margin-top(-1v);\n    @include padding-top(1v);\n    box-sizing: content-box;\n\n    @include after(block, '') {\n      @include absolute(0,0,0,0);\n      @include margin(1v 4v 8v);\n      @include z-index(under);\n    }\n  }\n\n  @include list {\n    @include margin(0);\n    @include padding(2v 0 6v);\n    @include padding(0 0 8v, lg);\n    @include size(20rem);\n  }\n\n  @include list-item {\n    @include relative;\n    @include margin(0);\n\n    &,\n    & > #{ns(nav__link)} {\n      @include text-style(sm);\n      @include padding(3v 4v);\n      text-align: left;\n      box-shadow: none;\n\n      @include before(null,none);\n    }\n\n    & > #{ns(nav__link)} {\n      display: block;\n      @include margin(-3v -4v);\n      border-radius: 0;\n    }\n\n    @include respond-from(lg) {\n      &:not(:first-child) {\n        @include after(block, '') {\n          @include absolute(0,0,null,0,null,1px);\n          @include margin(0 4v);\n        }\n      }\n\n      &:not(&--active):hover,\n      &:not(&--active):hover + & {\n        @include after {\n          display: none;\n        }\n      }\n    }\n\n    &--active {\n      @include before(null, '') {\n        @include absolute(0,null,0,0,2px);\n        @include margin(4v 0);\n      }\n    }\n  }\n}\n","////\n/// Navigation Module : Mega menu\n/// @group navigation\n////\n\n#{ns(mega-menu)} {\n  @include z-index(menu, true);\n  @include margin(0 -4v 1px);\n  @include padding(0 4v);\n\n  @include respond-from(lg) {\n    @include absolute(100%, null, null, calc(50% - 50vw), 100vw);\n    @include margin(-2px 0 0);\n    @include padding(0);\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  > #{ns(container)} {\n    @include padding(4v 4v 0);\n    @include padding(0 8v 4v, lg);\n    @include padding(0 0 4v, xl);\n\n    @include before(block, '') {\n      @include margin-bottom(2v);\n      @include margin-x(-4v, lg);\n      @include margin-bottom(4v, lg);\n    }\n\n    @include respond-from(lg) {\n      @include relative;\n\n      @include before {\n        @include size(null, 2px);\n      }\n    }\n  }\n\n  #{ns(link--close)} {\n    display: none;\n\n    @include margin-left(auto);\n    @include margin-right(-4v);\n\n    @include respond-from(lg) {\n      display: flex;\n    }\n  }\n\n  p {\n    @include class-not-start-with(ns(h, '')) {\n      display: none;\n\n      @include respond-from(lg) {\n        display: block;\n      }\n    }\n  }\n\n  &__category {\n    @include relative;\n    @include margin(0 -4v);\n    @include margin(0, lg);\n\n    @include respond-from(lg) {\n      @include after(block, '') {\n        @include absolute(null, 0, 0, 0, null, 1px);\n        @include margin-left(2v);\n        @include margin-right(2v);\n      }\n    }\n\n    &,\n    & > #{ns(nav__link)} {\n      @include padding(3v 4v, 0);\n      @include text-style(sm);\n      font-weight: bold;\n      text-align: left;\n      box-shadow: none;\n      @include padding(3v 2v, lg);\n    }\n\n    & > #{ns(nav__link)} {\n      display: block;\n      @include margin(-3v -4v);\n      border-radius: 0;\n\n      @include respond-from(lg) {\n        @include margin(-3v -2v);\n      }\n\n      @include before(null, none);\n    }\n\n    &--active {\n      @include before(null, '') {\n        @include absolute(0, null, 0, 0, 2px);\n        @include margin(3v 0);\n        @include margin(2v 0, lg);\n      }\n    }\n  }\n\n  @include list {\n    @include margin(0 -4v 2v);\n    @include margin(3v 0 0, lg);\n  }\n\n  @include list-item {\n    @include relative;\n    @include margin(0);\n\n    @include respond-from(lg) {\n      @include margin(0 0 2v 0);\n    }\n\n    @include before(null, none);\n\n    &,\n    & > #{ns(nav__link)} {\n      @include padding(3v 4v);\n      @include padding(1v 2v, lg);\n      @include text-style(sm);\n      text-align: left;\n      box-shadow: none;\n\n      @include before(null, none);\n    }\n\n    & > #{ns(nav__link)} {\n      @include margin(-3v -4v);\n      @include margin(-1v -2v, lg);\n      display: block;\n      border-radius: 0;\n    }\n\n    &--active {\n      @include before(null, '') {\n        @include absolute(0, null, 0, 0, 2px);\n        @include margin(3v 0);\n        @include margin(2v 0, lg);\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global selectors\n/// @group core\n////\n\n@mixin _class-pattern($selector, $unify: true) {\n  @if & == null {\n    @at-root #{$selector} {\n      @content;\n    }\n  }\n  @else if $unify {\n    @at-root #{selector-unify(&, $selector)} {\n      @content;\n    }\n  }\n  @else {\n    #{$selector} {\n      @content;\n    }\n  }\n}\n\n@mixin class-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}[class*=\"#{$pattern}\"]';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}:not([class*=\"#{$pattern}\"])';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-start-with($start, $unify: true) {\n  @include _class-pattern(class-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-start-with($start, $unify: true) {\n  @include _class-pattern(class-not-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-end-with($end, $unify: true) {\n  @include _class-pattern(class-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-end-with($end, $unify: true) {\n  @include _class-pattern(class-not-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-ns($unify: true) {\n  @include class-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-not-ns($unify: true) {\n  @include class-not-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n\n@mixin has-icon() {\n  @include class-start-with(ns(fi-, '')) {\n    @content;\n  }\n}\n\n/// SÃ©lecteur de toutes les Ã©lÃ©ments avec une classe du design system ainsi que leur noeuds enfants\n/// @access public\n@mixin all-ns-elements-selector() {\n  @include class-start-with(ns('', ''), false) {\n    @at-root {\n      &,\n      & * {\n        @at-root {\n          &,\n          &::before,\n          &::after {\n            @content;\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin specify($tags...) {\n  $selectors: (&);\n\n  @each $tag in $tags {\n    $selectors: append($selectors, selector-unify(&, $tag));\n  }\n  @at-root {\n    #{$selectors} {\n      @content;\n    }\n  }\n}\n","////\n/// Navigation Schemes\n/// @group navigation\n////\n\n/**\n* nav\n**/\n#{ns(nav)} {\n  &__link,\n  &__btn {\n    @include scheme-element-text-color(g800);\n    @include scheme-element-bg-color(t-plain, true, true);\n  }\n\n  &__btn {\n    &[aria-expanded=\"true\" i] {\n      @include respond-from(lg) {\n        @include scheme-element-text-color(bf500-plain);\n        @include scheme-element-bg-color(bf200-bf300);\n      }\n    }\n  }\n\n  @include list-item {\n    @include scheme-element-box-shadow-color(g300, true, inset 0 -1px 0 0 $COLOR);\n\n    &--active {\n      @include before {\n        @include scheme-element-bg-color(bf500);\n      }\n\n      & > #{ns(nav__link)},\n      & > #{ns(nav__btn)} {\n        @include scheme-element-text-color(bf500);\n\n        @include respond-from(lg) {\n          @include scheme-element-box-shadow-color(bf500, false, inset 0 -2px 0 0 $COLOR); //TODO: transition\n        }\n      }\n    }\n  }\n}\n\n/**\n* menu\n**/\n#{ns(menu)} {\n  @include respond-from(lg) {\n    @include after {\n      @include scheme-element-bg-color(w-g750, true);\n    }\n  }\n\n  @include list-item {\n    @include respond-from(lg) {\n      &:not(:last-child) {\n        @include after {\n          @include scheme-element-bg-color(g300, true);\n        }\n      }\n    }\n\n    &--active {\n      @include scheme-element-text-color(bf500);\n      #{ns(nav__link)} {\n        color: currentColor;\n      }\n      @include before {\n        background-color: currentColor;\n      }\n    }\n  }\n}\n\n/**\n* mega-menu\n**/\n#{ns(mega-menu)} {\n  @include scheme-element-bg-color(w-g750, true);\n\n  > #{ns(container)} {\n    @include respond-from(lg) {\n      @include before {\n        @include scheme-element-bg-color(bf200-bf300, true);\n      }\n    }\n  }\n\n  // // TODO: changer en rf-link--close\n  // #{ns(mega-menu__btn) + ns(fi-close-line)} {\n  //   @include scheme-element-bg-color(t-plain);\n  //   @include scheme-element-text-color(bf500);\n  // }\n\n  &__category {\n    @include respond-from(lg) {\n      @include after {\n        @include scheme-element-bg-color(g300, true);\n      }\n    }\n\n    &--active {\n      &,\n      & > #{ns(nav__link)} {\n        @include scheme-element-text-color(bf500);\n      }\n\n      @include before(null, '') {\n        background-color: currentColor;\n      }\n    }\n  }\n\n  @include list-item {\n    &--active {\n      &,\n      & > #{ns(nav__link)} {\n        @include scheme-element-text-color(bf500);\n      }\n\n      @include before(null, '') {\n        background-color: currentColor;\n      }\n    }\n  }\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par Ã©lÃ©ment\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un Ã©lÃ©ment pour un propriÃ©tÃ© donnÃ©e\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme dÃ©fini dans settings/sets\n/// @@param {String} $prop - propriÃ©tÃ© affectÃ©e\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associÃ©e\n/// @param {Bool | String} $hover - si true, un effet de hover est appliquÃ© sur l'Ã©lÃ©ment en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a dÃ©ja Ã©tÃ© appliquÃ© sur l'Ã©lÃ©ment)\n/// @param {String | list}  $value - la valeur appliquÃ©e Ã  la propriÃ©tÃ©. la variable $COLOR est remplacÃ©e par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sÃ©lÃ©cteur de l'Ã©lÃ©ment\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacÃ© par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un Ã©lÃ©ment\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme dÃ©fini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquÃ©e sur la propriÃ©tÃ©\n/// @param {Bool | String} $hover - si true, un effet de hover est appliquÃ© sur l'Ã©lÃ©ment en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a dÃ©ja Ã©tÃ© appliquÃ© sur l'Ã©lÃ©ment)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un Ã©lÃ©ment\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme dÃ©fini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquÃ©e sur la propriÃ©tÃ©\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un Ã©lÃ©ment\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme dÃ©fini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquÃ©e sur la propriÃ©tÃ©\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un Ã©lÃ©ment\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme dÃ©fini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquÃ©e sur la propriÃ©tÃ©\n/// @param {String} $side - le cÃ´tÃ© affectÃ©. valeurs: top, right, bottom, left\n/// @param {List} $value - dÃ©finition des propriÃ©tÃ©s de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un Ã©lÃ©ment\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme dÃ©fini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquÃ©e sur la propriÃ©tÃ©\n/// @param {List} $value - dÃ©finition des propriÃ©tÃ©s d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un Ã©lÃ©ment\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme dÃ©fini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquÃ©e sur la propriÃ©tÃ©\n/// @param {List} $value - dÃ©finition des propriÃ©tÃ©s de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intÃ©gral\n/// @access public\n/// @param {String} $value - le nombre en chaÃ®ne de caractÃ¨res\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractÃ¨res\n/// @access public\n/// @param {String} $stack - chaine de caractÃ¨re oÃ¹ chercher\n/// @param {String} $needle - Ã©lÃ©ment Ã  chercher\n/// @param {String} $content - Ã©lÃ©ment de remplacement\n/// @return {String} la chaÃ®ne de caractÃ¨res transformÃ©e\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// DÃ©coupage d'une chaine de caractÃ¨res avec un sÃ©parateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractÃ¨re Ã  dÃ©couper\n/// @param {String} $separator - sÃ©parateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Schemes Module : Hover\n/// @group schemes\n////\n\n/// DÃ©finit les couleurs d'hover\n/// @access private\n/// @param {Color} $color - couleur de l'Ã©lÃ©ment\n/// @param {Bool} $is-block - est-ce que cette dÃ©finition se fait au niveau d'un block de combinaison ?\n@mixin _get-hover-vars($color, $is-block: false) {\n\n  @if opacity($color) != 0 {\n\n    $prop: color;\n\n    @if $is-block {\n      $prop: block-color;\n    }\n\n    --#{$prop}-hover: #{ _overlay-color($color, 1) };\n    --#{$prop}-active: #{ _overlay-color($color, 2) };\n  }\n  @else {\n    --color-hover: var(--block-color-hover);\n    --color-active: var(--block-color-active);\n  }\n}\n\n/// Applique le hover sur un Ã©lÃ©ment\n/// @access private\n@mixin _scheme-element-hover() {\n  @media (hover: hover) and (pointer: fine) {\n    $selectors: ('&:not(a):not(:disabled)');\n    $a: selector-associate(&, 'a[href]');\n    @if length($a) {\n      $selectors: append($selectors, $a, 'comma');\n    }\n    @at-root #{$selectors} {\n      &:hover {\n        background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n      }\n\n      &:active {\n        background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n      }\n    }\n  }\n}\n\n@mixin remove-hover() {\n  &:hover,\n  &:active {\n    &:not([disabled]),\n    &:not(:disabled) {\n      background-image: none;\n    }\n  }\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, nâ€˜utiliser la mixin respond-to uniquement sâ€˜il nâ€˜y a pas dâ€˜autre alternative, lui prÃ©fÃ©rer systÃ©matiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}